generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      Role      @default(VOLUNTEER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  address    String
  city       String
  country    String
  postalcode String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model available_time {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  volunteer_id Int?
  service_id   Int?
  date         DateTime    @db.Timestamp(6)
  services     services?   @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  elders       elders?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  volunteers   volunteers? @relation(fields: [volunteer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model elders {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  phone_nr       String?          @db.VarChar(20)
  address        String?
  post_nr        String?          @db.VarChar(10)
  service_id     Int?
  photo          String?
  gender         String?          @db.VarChar(10)
  available_time available_time[]
  services       services?        @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews        reviews[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id           Int         @id @default(autoincrement())
  title        String?     @db.VarChar(100)
  volunteer_id Int?
  description  String?
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  stars        Int?
  user_id      Int?
  elders       elders?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  volunteers   volunteers? @relation(fields: [volunteer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model services {
  id                 Int                  @id @default(autoincrement())
  description        String
  available_time     available_time[]
  elders             elders[]
  volunteer_services volunteer_services[]
}

model volunteer_services {
  volunteer_id Int
  service_id   Int
  services     services   @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  volunteers   volunteers @relation(fields: [volunteer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([volunteer_id, service_id])
}

model volunteers {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  email              String               @unique @db.VarChar(100)
  phone_nr           String?              @db.VarChar(20)
  address            String?
  post_nr            String?              @db.VarChar(10)
  routine            String?
  photo              String?
  gender             String?              @db.VarChar(10)
  available_time     available_time[]
  reviews            reviews[]
  volunteer_services volunteer_services[]
}

enum Role {
  ADMIN
  ELDER
  VOLUNTEER
}
